<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/zkpgds/blog</id><title>RSS feed of zkpgds's blog</title><updated>2022-08-10T06:43:04.085725+00:00</updated><author><name>zkpgds</name><email>843328404@qq.com</email></author><link href="https://github.com/zkpgds/blog"/><link href="https://raw.githubusercontent.com/zkpgds/blog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><entry><id>https://github.com/zkpgds/blog/issues/6</id><title>安全运维规范</title><updated>2022-08-10T06:43:04.520019+00:00</updated><content type="html"><![CDATA[<p>=简介=
为了保证生产系统运维工作安全高效的开展，特制定此安全运维规范，以便明确运维职责，标准化运维相关工作，统一运维操作，收敛运维风险敞口，降低安全风险，提高运维工作效率和质量。</p>
<p>=通用规范=</p>
<ul>
<li>生产网安全需遵守生产网安全规范</li>
<li>所有代码管理必须遵循集团代码分级管理规范  //<strong>参见 [[http://phabricator.huobidev.com/w/dev-rule/%E4%BB%A3%E7%A0%81%E5%88%86%E7%BA%A7/ | 代码分级]]</strong>//</li>
<li>研发流程与集团研发流程保持一致，采用集团统一的构建、发布系统</li>
<li>研发设计与数据库设计符合集团研发相应的设计规范 <strong>//参见 [[ /w/dba/regulation/db_specification/ | 数据库设计规范 ]]//</strong></li>
<li>日志符合集团研发规范 <strong>//参见 [[ /w/devops/%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1/ | 日志规范 ]]//</strong></li>
<li>应用规范 //<strong>参见 [[/w/devops/应用部署维护规范/| 应用部署规范]]</strong>//</li>
<li>容器化应用申请规范 //<strong>参见 [[/w/devops/application_apply_template/| 容器化应用部署申请规范]]</strong>//</li>
</ul>
<p>=生产机器=</p>
<ul>
<li>机器的申请需要遵循资源申请流程 //<strong>参见 [[http://phabricator.huobidev.com/w/%E7%BB%84%E7%BB%87%E8%B5%84%E4%BA%A7/%E7%BB%84%E7%BB%87%E8%B5%84%E4%BA%A7/%E7%BB%84%E7%BB%87%E7%BA%A7%E6%A0%87%E5%87%86%E8%BF%87%E7%A8%8B/%E9%A1%B9%E7%9B%AE/%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E9%83%A8%E9%97%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/ | 运维资源申请规程 ]]//</strong>，由运维团队通过初始化脚本或配置管理工具进行统一初始化  </li>
<li>除运维团队相关负责人员外，其他任何人员不允许接触和拥有生产机器的登录信息（用户名/密码、私钥文件）</li>
<li>除运维团队相关负责人员外，任何其他人员不允许直接或间接登录生产机器，运维人员登录时必须使用指定的双因素认证，目前采用 Yubikey</li>
<li>登录生产机器后不允许修改配置、代码等，防止影响线上系统或造成环境潜在不一致</li>
<li>生产机器需要添加安全审计、入侵检测工具，如 AuditBeat、OSSEC</li>
<li>访问生产机器的密码和密钥符合生产网安全规范，禁止出现弱密码</li>
<li>所有的基础服务，能设置密码的必须设置密码，不能设置密码的（如 Redis）需要报备安全</li>
<li>整个公司采用一致的服务器操作系统版本，服务器软件禁止开启自动更新，操作系统版本的升级按公司整体进行</li>
<li>系统设备的管理人员转岗或离职，必须立即注销该账号的所有权限，并移交所 有设备资产</li>
</ul>
<p>=生产数据库=</p>
<ul>
<li>数据库的申请需要遵循资源申请流程，由运维团队通过初始化脚本或配置管理工具进行统一初始化  </li>
<li>除运维人员在发生问题进行调查外，任何人不能直接登录数据库所在的服务器</li>
<li>只有负责维护的 DBA 才能拥有所维护数据库的配置管理和数据读写权限</li>
<li>生产库的读权限仅在必要时（如调查问题）才开放给相关研发人员，权限的申请需要经过数据库权限申请流程，权限赋予时考虑使用时间，使用后及时收回</li>
<li>如果有线上数据库查询平台类工具，可以开放给相关研发人员长期读权限，权限的申请需要经过平台权限申请流程，但平台需要对敏感库表进行脱敏处理，防止数据泄露</li>
<li>生产库需要建立白名单机制，仅对指定机器或人员开放</li>
<li>DBA须通过堡垒机访问数据库，确保可记录、审计操作数据库行为。</li>
<li>禁止直接操作线上数据库数据。若特殊原因，线上数据的变更必须通过数据变更申请流程，需要研发负责人和运维负责人进行批准，涉及敏感数据（机密、秘密）时需要对应业务和安全介入批准</li>
<li>访问数据库的密码和密钥符合生产网安全规范，禁止出现弱密码</li>
</ul>
<p>=监控与告警=</p>
<ul>
<li>所有线上设备需要建立全面的基础资源监控，包括但不限于 CPU、内存、磁盘、IO、流量，并建立相应报警</li>
<li>数据库需要监控 TPS、QPS 和慢查询等，并建立相应报警</li>
<li>所有线上设备需要监控登录记录、非法访问，一经发现及时报警</li>
<li>应用系统对可用性和性能进行监控，并建立相应报警</li>
<li>需要监控系统的关键业务指标，并建立相应报警</li>
<li>建议使用 Zabbix+Datadog+PagerDuty 的监控告警方式</li>
</ul>
<p>=轮值报障=</p>
<ul>
<li>遵循集团的线上运维报障流程，建立 7x24 的轮值机制 //<strong>参见 [[/w/devops/on-call/|运维值班规范]]</strong>//</li>
<li>所有事故需要建立事故报告，B 级以上事故需要进行 COE //<strong>参见 [[/w/devops/accident_levels/|故障分级标准]]</strong>//</li>
<li>定期进行线上问题分析，持续提高系统质量和稳定性，持续改善运维效率 //<strong>参见  [[/w/事故处理/|事故处理规范]]</strong>//</li>
</ul>
<p>=资源管理=</p>
<ul>
<li>维护资源清单，定期进行资源使用情况分析，从安全和成本的角度定期复查，确定优化方案</li>
</ul>
<p>=高可用=</p>
<ul>
<li>保障业务服务的高可用，在多可用区做 HA 部署，避免业务服务单点</li>
</ul>
<p>=数据备份=</p>
<ul>
<li>建立多重备份机制：常规备份、全量备份、快照、S3备份</li>
<li>定期检查备份文件是否可用、完整，避免出故障后备份数据不可用</li>
</ul>
<p>=安全=</p>
<ul>
<li>运维人员办公需遵循集团办公网安全要求</li>
<li>资产清单、Cloudflare 防护策略需同步安全部</li>
<li>建立运维与安全应急响应协作机制，定期演练事故场景</li>
<li>定期对服务器进行漏洞安全扫描</li>
<li>不得自创加密算法，使用标准的加密算法</li>
<li>统一日志收集与分析，需同步安全部</li>
</ul>
<p>=定期检查=</p>
<ul>
<li>定期对基础设施进行检查</li>
<li>监控域名的过期时间</li>
<li>及时更新证书，防止过期</li>
<li>对使用到的第三方产品、服务的安全性进行检查</li>
</ul>
<p>=谨慎操作=</p>
<ul>
<li>在处理需求和故障时，执行风险命令（如 rm、restart、reboot 等）需再三确认，执行命令前，仔细检查所在服务器、路径</li>
<li>避免在疲劳、不清醒状态下操作服务器，尤其是数据库，出错几率较大</li>
<li>在处理事故时，要考虑处理措施是否会引发连锁故障，重要操作三思而行</li>
</ul>
<p>=事故分析=</p>
<ul>
<li>在事故分析时，践行无指责文化，重在定位原因，制定改进措施</li>
</ul>
<p>=持续学习=</p>
<ul>
<li>DevOpsSec 是知识不断变化的领域，需保持对新技术、安全漏洞、最佳实践的关注</li>
</ul>
<p>=审批=</p>
<ul>
<li>业务系统日常运维权限的变更不需要经过安全审批</li>
<li>涉及运营数据的操作，经主管负责人审批后,</li>
<li>
涉及如下操作，需经过安全部审批<ul>
<li>直接修改线上数据库的操作</li>
<li>涉及核心数据（用户数据、资产数据）的操作</li>
<li>涉及敏感代码的操作</li>
</ul>
</li>
</ul>
<p>=变更记录=
| <strong>文档版本</strong> | V0.1
| <strong>制定部门</strong> | 集团运维
| <strong>审核人</strong>|
| <strong>变更说明</strong>| 2019-01-1-11，安全与运维讨论创建|</p>
<p>=参考资料=
{F780080}</p>
]]></content><link href="https://github.com/zkpgds/blog/issues/6" rel="alternate"/><category term="技术相关"/><published>2022-08-09T07:17:31+00:00</published></entry><entry><id>https://github.com/zkpgds/blog/issues/5</id><title>git 使用规范</title><updated>2022-08-10T06:43:04.770229+00:00</updated><content type="html"><![CDATA[<h1>Git 规范</h1>
<h2>git分支策略</h2>
<p><img src="https://user-images.githubusercontent.com/3361961/183578049-255fb33f-c4e2-44fa-865c-295fb91ecc96.png" alt="image" /></p>
<h2>Git 开发流程规范（试用版）</h2>
<p><code>为规范Git在版本控制方面的使用，引入工具git-flow进行分支管理</code></p>
<p>== 安装 git-flow</p>
<ul>
<li>Mac OS X</li>
</ul>
<p><code>brew install git-flow</code></p>
<ul>
<li>Linux</li>
</ul>
<p><code>apt-get install git-flow</code></p>
<ul>
<li>Windows（Cygwin）</li>
</ul>
<p><code>wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</code></p>
<p>(NOTE)注：建议 Windows 下直接使用 IDE，比较简化……</p>
<h2>IDE</h2>
<p>Mac OS X和Windows下，推荐使用 Sourcetree，已经自带 git-flow 的功能</p>
<h2>git-flow 初始化</h2>
<p><code>git flow init</code></p>
<h2>git-flow 分支类型及使用场景</h2>
<p>(NOTE)git-flow 的分支类型分为 5 种（暂时忽略 support 分支），即 master（主干）、develop（开发）、feature（功能）、release（发布）、hotfix（补丁）。各分支使用场景如下：</p>
<ul>
<li>master（主干）：master 分支上的代码是稳定版，即代码开发完成，经过测试，没有明显的bug，才能合并到master中。请注意永远不要在 master 分支上直接开发和提交代码，以确保 master 上的代码一直可用。</li>
<li>develop（开发）：develop 分支用作平时开发的主分支，并一直存在。如果修改代码，尽量新建 feature 分支修改完再合并到 develop 分支。如果要提交 develop 分支到远端服务器（github），需要使用 git push origin develop 传统方式提交。</li>
<li>feature（功能）：当需要新加一个功能时（或者在本地修改bug），需要新建一个 feature 分支。在新建的 feature 分支上进行开发，完成后合并到 develop 分支。如果新加的功能需多人共同完成，把新建的 feature 分支发布出去。</li>
<li>release（发布）：当开发进行到一定程度，可以发布时，建立一个 release 分支并指定版本号（版本号规则请看后续说明），并将新建的 release 发布出去。开发人员可以对 release 分支上的代码进行集中测试，和修改 bug 。全部完成经过测试没有问题后，将 release 分支上的代码合并到 master 分支和自己的 develop 分支。</li>
<li>hotfix（补丁）：若在 master 分支上发现 bug 需要紧急修复，新建一个 hotfix 分支并指定版本号，在新建的 hotfix 分支上修复完成，测试通过后，合并到 master 分支和本地的 develop 分支。</li>
</ul>
<h2>常用使用说明</h2>
<p>初始化 git-flow 后，工作拷贝将自动切换到 develop 分支。</p>
<h3>增加新功能</h3>
<p><code>git flow feature start FEATURE_NAME</code>
(NOTE)这个命令基于 develop 分支创建一个新分支 FEATURE_NAME，并且切换到该分支下。</p>
<blockquote>
<p>如新增一个用户登录功能：</p>
</blockquote>
<p><code>git flow feature start login</code>
(NOTE)会基于目前 develop 分支的代码创建 feature/login 分支，并切换工作拷贝到 feature/login 分支下。</p>
<h3>完成新功能开发</h3>
<p><code>git flow feature finish FEATURE_NAME</code>
(NOTE)这个命令将合并当前 feature 分支的代码到 develop ，并且切换到 develop 分支，再删除 feature 分支。</p>
<blockquote>
<p>如用户登录功能开发完成：</p>
</blockquote>
<p><code>git flow feature finish login</code>
(NOTE)会合并 feature/login 分支下的代码到 develop 分支，将工作拷贝切换到 develop 分支，最后删除 feature/login 分支。</p>
<h3>发布/获取新功能分支</h3>
<pre><code>git flow feature publish FEATURE_NAME
git flow feature pull FEATURE_NAME
</code></pre>
<p>(NOTE)如果需要多人协同开发功能，可将新建的 feature 分支发布到远端服务器（github），其他参与者再把该 feature 分支拉取下来。</p>
<h3>新建一个发布版本</h3>
<pre><code>git flow release start RELEASE_VERSION [BASE]
</code></pre>
<p>(NOTE)该命令使用提供的版本号新建一个 release 分支，BASE 是可选参数，表示基于 develop 的什么版本来建立 release 分支，为 develop 分支的某一个 Hash 值。省略 BASE 表示以最新的 develop 代码来建立 release 分支。</p>
<blockquote>
<p>如基于最新的 develop 代码新建版本号为 0.1.0 的 release 分支：</p>
</blockquote>
<p><code>git flow release start 0.1.0</code>
(NOTE)此命令将新建一个 release/0.1.0 分支，并切换工作拷贝至该分支。</p>
<p>发布/跟踪发布分支</p>
<pre><code>git flow release publish RELEASE_VERSION
git flow release track RELEASE_VERSION
</code></pre>
<p>(NOTE)一般来说，新建 release 分支后要立即发布到远端服务器（github），方便其他开发人员合并代码和修改 bug 。</p>
<h3>完成发布版本</h3>
<p><code>git flow release finish RELEASE_VERSION</code>
(NOTE)当 release 经过合并代码和修改 bug，比较稳定时，就完成发布版本。将该 release 分支的代码合并到 master 分支和本地的 develop 分支，并且使用 release 分支名打一个 tag，最后删除此 release 分支。</p>
<blockquote>
<p>如完成 release 分支 0.1.0 的开发：</p>
</blockquote>
<p><code>git flow release finish 0.1.0</code>
(NOTE)此命令将 release/0.1.0 分支合并到 master 分支和本地 develop 分支，以 0.1.0 为名称打一个 tag，并且删除 release/0.1.0 分支。</p>
<h3>新建补丁分支（bug 紧急修复）</h3>
<p><code>git flow hotfix start VERSION [RELEASE VERSION]</code>
(NOTE)当 master 分支上发现 bug 时，不要直接修改 master 分支上的代码，而是使用该命令建立一个 hotfix 分支，在该 hotfix 分支上修复好 bug，最后合并到 master 分支。VERSION 是补丁的版本号，RELEASE_VERSION 是可选参数，填写 finish release 时的版本号以确定修改哪个 master 的代码版本。</p>
<h3>完成补丁分支</h3>
<p><code>git flow hotfix finish VERSION</code>
(NOTE)此命令将修改过 bug 的代码合并到 master 分支和 develop 分支。</p>
<h2>版本号命名规则</h2>
<p>版本号命名以 [大版本号].[小版本号].[补丁号] 方式命名，其中：</p>
<h1>大版本号更新表示一次里程碑开发的完成，包含了若干个 feature 的实现。</h1>
<h1>小版本号更新表示一个 feature 的完成。</h1>
<h1>补丁号更新表示发布的 feature 不变，只是修改 bug 。</h1>
<blockquote>
<p>举例：</p>
</blockquote>
<p>某次发布是里程碑开发的结束，版本号为 1.0.0
很快，上次发布的版本发现了 bug，紧急修复，再次发布，版本号为 1.0.1
再次发现 bug，修复，重新发布，版本号为 1.0.2
几个星期后，新增了几个功能，再次发布，版本号为 1.1.0
几天后发现新增的功能有 bug，紧急修复，发布，版本号为 1.1.1
再次新增功能发布，版本号为 1.2.0
发现 bug，修复并发布，版本号为 1.2.1
再次完成一次里程碑开发，发布，版本号为 2.0.0
……以此类推
非常特殊的情况下，需要同时发布多个版本，以 [大版本号].[小版本号].[补丁号].[rcN] 的方式命名或者 [大版本号].[小版本号].[补丁号].[rc-FEATURE_NAME] 的方式命名：</p>
<p>1.0.0.rc1 或者 1.0.0.rc-ionic
1.0.0.rc2 或者 1.0.0.rc-native
……</p>
<h2>参考文档</h2>
<p><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html">Git Flow Cheatsheet</a>
<a href="http://fann.im/blog/2012/03/12/git-flow-notes/">Git Flow 使用笔记</a></p>
<p>-------------------------------------------------------第二部分------------------------------------------------------------</p>
<h1>一些git 命令</h1>
<ul>
<li>安装arc(不要使用中文)</li>
<li>创建远程分支 FEATURE_Txxxx (默认基于 master)
<code>git push origin master:FEATURE_T1234</code></li>
<li>checkout 远程分支 FEATURE_Txxxx（不要在该分支上直接 commit）
<code>git checkout --track origin/FEATURE_T1234</code></li>
<li>checkout 本地开发分支 Txxxx
<code>arc feature T1234 // git checkout -b T1234 FEATURE_T1234</code></li>
</ul>
<blockquote>
<p>不要直接在远程分支上提交代码，使用本地分支 commit &amp; diff</p>
</blockquote>
<ul>
<li>在开发分支上提交代码并提审
<code>git commit -m &#x27;T1234 .... &#x27; arc diff HEAD^                        // 根据实际情况选择 commit id，默认是 parent</code></li>
</ul>
<blockquote>
<p>commit message 以任务号开头，填具体修改内容摘要
一个 task 可对应多个commit，不需要重复填写任务标题</p>
</blockquote>
<ul>
<li>
<p>根据审核意见修改代码后，更新diff
<code>git commit --amend arc diff --update Dxxxxx</code></p>
</li>
<li>
<p>审核代码通过后，将代码发布到远程分支
<code>arc land --onto FEATURE_T1234</code></p>
</li>
<li>
<p>打RC tag
<code>git tag RC_T1234 git push origin RC_T1234</code></p>
</li>
<li>
<p>测试过程中修复 bug，重复上述流程
<code>git checkout -b T1235 FEATURE_T1234    // 使用BUG任务号 git commit -m &#x27;T1235 .... &#x27; arc diff HEAD^</code></p>
</li>
<li>
<p>如果此处有update，要使用如下方法：
<code>git commit --amend arc diff HEAD^</code></p>
</li>
<li>
<p>如果已经accepted，需要land：
<code>arc land --onto FEATURE_T1234 git tag RC_T1234_2 git push origin RC_T1234_2</code></p>
</li>
</ul>
<blockquote>
<p>使用BUG任务号提交 bugfix 作为关联，方便查看bug的修复方式</p>
</blockquote>
<ul>
<li>测试通过后, 合并 master 分支上的最新 PRD 标签
<code>git checkout FEATURE_T1234 git pull                     // 确认与远端同步 git log origin/master        // 确认最新的 PRD_Txxxx 标签 git merge PRD_Txxxx          // 使用标签而不是分支 git merge --continue git push</code></li>
</ul>
<blockquote>
<p>必需在远程分支上先 pull 再 merge，禁止出现 Merge branch 'xxx' of ssh://...</p>
</blockquote>
<blockquote>
<p>解决直接冲突问题后 continue 完成合并，逻辑冲突另提交 commit 审核</p>
</blockquote>
<blockquote>
<p>commit message 包含 PRD_Txxxx 标签名， 保留 Conflicts 冲突文件列表
Merge tag 'PRD_Txxxx' into FEATURE_T1234
Conflicts: path/to/file.java</p>
</blockquote>
<ul>
<li>在 FEATURE 分支上打 PRD 标签
<code>git tag PRD_T1234 git push origin PRD_T1234</code></li>
<li>回归测试后，更新 mater 分支
<code>git checkout master git merge PRD_T1234 --ff-only git push</code></li>
</ul>
<blockquote>
<p>若 master fast-forward 失败，表示有并发上线，沟通确认 master 上的最新 TAG 是否已完成上线
切回 FEATURE 分支，合并最新的 PRD 标签，评估是否需要再次回归测试</p>
</blockquote>
<ul>
<li>上线发布前检查
<code>git log --pretty=oneline PRD_new..PRD_old                    // 是否有遗漏未合并的commit git log --pretty=oneline PRD_old..PRD_new | grep -v Merge    // 上线包含的commit，将结果评论至上线TASK</code></li>
</ul>
<blockquote>
<p>测试复核 PRD_old 是线上正在运行的版本，PRD_new = origin/master</p>
</blockquote>
<hr />
<p>-------------------------------------------------------第三部分------------------------------------------------------------</p>
<h1>安装 arc</h1>
<p>Phabricator是一个代码审查管理，Arcanist是Phabricator配套的Code Review工具,需要配合本地git使用。</p>
<h2>1.确认PHP是否已经安装</h2>
<p>Mac OS X应该已经默认安装了PHP环境。在终端中输入php -v检查是否已安装了PHP环境。
最新版php中有废弃的方法,arc不能正常运行，需要安装旧一些的版本。</p>
<p>安装php7.3</p>
<pre><code>brew reinstall php@7.3
brew link php@7.3
</code></pre>
<p>过程中如果有失败，失败什么安装什么</p>
<p>如果遇到错误：Error: <a href="mailto:php@7.3">php@7.3</a> has been disabled because it is a versioned formula!
可以先尝试如下命令：</p>
<pre><code>brew tap shivammathur/php
brew install shivammathur/php/php@7.3
过程中如果有失败，失败什么安装什么
</code></pre>
<p>执行完后再重新执行：</p>
<pre><code>brew reinstall php@7.3
brew link php@7.3
</code></pre>
<p>问题：</p>
<p>Library not loaded: /opt/homebrew/opt/icu4c/lib/libicui18n.70.dylib
解决办法：</p>
<ol>
<li>执行命令 which brew 得到 brew安装目录 /opt/homebrew/bin/brew</li>
<li>cd 到 /opt/homebrew</li>
<li>cd 到 /Library/Taps/homebrew/homebrew-core/Formula</li>
<li>执行命令：git log --follow icu4c.rb</li>
<li>找到缺少的版本70对应的commit id</li>
<li>执行命令 git checkout -b icu4c-版本号 commitID</li>
<li>执行命令 brew reinstall ./icu4c.rb</li>
</ol>
<h2>2.安装Arcanist</h2>
<p>在计划安装目录clone Arcanist代码仓库
git clone <a href="https://github.com/phacility/libphutil.git">https://github.com/phacility/libphutil.git</a>
git clone <a href="https://github.com/phacility/arcanist.git">https://github.com/phacility/arcanist.git</a> </p>
<p>然后将两个仓库均切换至 legacy-2019 分支</p>
<p>##3.配置arc的环境变量
新系统的默认shell应该都是zsh，这里以zsh为例来讲述如何进行配置。</p>
<pre><code>cd ~
vi .zshrc
</code></pre>
<p>在配置文件的末尾加上这一句 </p>
<pre><code>export PATH=${PATH}:/路径/arcanist/bin/ 
</code></pre>
<p>保存后退出VI。</p>
<p>输入命令行：<code>source .zshrc</code> 更新环境变量。 </p>
<p>然后输入命令：<code>arc –-help</code> 查看配置是否成功。</p>
<h2>4.设置Phabricator地址</h2>
<p>vi /路径/arcanist/.arcconfig ，将  &quot;phabricator.uri&quot;: &quot;https://secure.phabricator.com/&quot;, 改为  &quot;phabricator.uri&quot;: &quot;http://phabricator.huobidev.com/&quot;,</p>
<p>配置项目
打开终端，切换到项目所在目录，运行<code>arc install-certificate</code>，按提示添加访问token
打开[[ <a href="http://phabricator.huobidev.com/conduit/login/">http://phabricator.huobidev.com/conduit/login/</a> | token链接 ]]可以获取到token。</p>
<p>在你的用户根目录下建立.arcrc文件。</p>
<p>执行命令 <code>vi ~/.arcrc</code>，输入如下内容后保存（<strong>注意需要替换成你获取到的token</strong>）。</p>
<pre><code>{
  &quot;config&quot;: {
    &quot;default&quot;: &quot;http://phabricator.huobidev.com/&quot;,
    &quot;editor&quot;: &quot;vim&quot;
  },
  &quot;hosts&quot;: {
    &quot;http://phabricator.huobidev.com/api/&quot;: {
      &quot;token&quot;: &quot;cli-otp356fbifisk3qzfteudxz6ylre&quot;
    }
  }
}
</code></pre>
<h2>5.代码审查流程</h2>
<h3>5.1创建diff，发送给reviewer去review</h3>
<p>命令为：<code>arc diff</code></p>
<p>在接下来的界面中，填写一些。规范可以参考：</p>
<blockquote>
<p>代码提交时，Lint结果状态必须为Lint OK。扫描出的问题需要即时修改后，再提交代码。
Summary中必须附带任务号或者Bug号。 举例： [T68652] yeguolong: 去掉HUSD相关
Test Plan需要写明测试影响范围，并跟测试说明。
修复bug时，为了方便他人查阅代码变动历史，需要将Bug号或者任务号添加到代码注释中去。</p>
</blockquote>
<p>标题样式：</p>
<p><type>: <message></p>
<p>对格式的说明如下：</p>
<p>type代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。所有的type类型如下：
feat： 新增feature
fix: 修复bug
docs: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等
style: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑
refactor: 代码重构，没有加新功能或者修复bug
perf: 优化相关，比如提升性能、体验
test: 测试用例，包括单元测试、集成测试等
chore: 改变构建流程、或者增加依赖库、工具等
revert: 回滚到上一个版本</p>
<p>message代表本次提交内容的描述，必须阐述清楚本次提交的详细变更。</p>
<h3>5.2 reviewer进行Code Review</h3>
<p>打开生成的diff链接，进行Review，可以在里面加上review意见。</p>
<h3>5.3developer根据意见更新代码</h3>
<p>更新代码后，再次运行<code>arc diff</code>，可以将diff进行更新。</p>
<h3>5.4developer上传代码</h3>
<p>注意，运行的命令是<code>arc land</code>，不是<code>git push</code>。</p>
]]></content><link href="https://github.com/zkpgds/blog/issues/5" rel="alternate"/><category term="技术相关"/><published>2022-08-09T06:18:12+00:00</published></entry><entry><id>https://github.com/zkpgds/blog/issues/4</id><title>博客终于弄好了~~~</title><updated>2022-08-10T06:43:05.025985+00:00</updated><content type="html"><![CDATA[<h5>很高兴终于把这个搞起来了，在这里要特别感谢我的前同事狗子哥，还专门写了一篇博客指导。未来日子里希望不偷懒，常常来这里记录生活点滴！</h5>
]]></content><link href="https://github.com/zkpgds/blog/issues/4" rel="alternate"/><category term="日记"/><published>2022-08-03T13:12:04+00:00</published></entry></feed>